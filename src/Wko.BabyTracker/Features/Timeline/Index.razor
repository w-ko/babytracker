@page "/timeline"
@page "/timeline/{id:guid}"
@using TimelineEntry = Wko.BabyTracker.Features.Timeline.Components.TimelineEntry
@inject IDispatcher Dispatcher

@if (!ViewModel.IsProfileSelected)
{
    <div>Select a Profile</div>
    @foreach (var profile in ViewModel.AvailableProfiles)
    {
        <a class="badge" href="timeline/@profile.Id">@profile.FirstName</a>
    }
}

@if (!ViewModel.HasTimelineEntries)
{
    <img src="svg/no_profiles.svg" alt="No entries available" class="opacity-25"/>
}

@foreach (var group in ViewModel.TimelineGroups)
{
    <div class="timeline-group">@group</div>
    @foreach (var entry in ViewModel.GetTimelineEntriesByGroup(group))
    {
        <TimelineEntry Type="@entry.Type" OnEdit="() => OnEdit(entry.Id)">
            <CardHeader>@ViewModel.GetEntryTitle(entry)</CardHeader>
            <CardBody>@ViewModel.GetEntryBody(entry)</CardBody>
        </TimelineEntry>
    }
}

<EntryEdit @ref="EditComponent"/>

@code {

    [Parameter] public Guid? Id { get; set; }

    private TimelineViewModel ViewModel { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        ViewModel = await TimelineViewModelBuilder.ForChildId(Id).Build(Dispatcher);
        await base.OnParametersSetAsync();
    }

    private EntryEdit? EditComponent;
    
    private void OnEdit(Guid id)
    {
        EditComponent?.Show(id);
        Console.WriteLine($"Edit {id}");
    }

}
